#!/bin/bash
#
source easybashgui
source host-ops
#

##########
# testing variables - DELETE THESE LINES WHEN DONE
VI_SERVER="10.131.11.74"
VI_USERNAME="root"
VI_PASSWORD="vmware"

function menu1 {

	menu 	"List vMA ESX target servers"\
		"Add target ESX servers to vMA" \
		"Remove ESX target server from vMA"\
		"Set ESX server and username for this session" \
		"Test connectivity to ESX server" \
		"Enable vMA Logging"\
		"Next menu" \
		"Quit" 

	task="$( 0< "${dir_tmp}/${file_tmp}" )" ; if_arg_is_an_empty_variable_then_exit "task"

        case ${task} in
        	"List vMA ESX target servers")
        		list_vma_servers;;
        	"Add target ESX servers to vMA")
        		addserver;;
        	"Remove ESX target server from vMA")
        		#remove_server;;
			echo "Remove ESX target server from vMA" ;;
        	"Set ESX server and username for this session")
        		set_server;;
        	"Test connectivity to ESX server")
        		test_server_user_pw;;
        	"Enable vMA Logging")
        		vilog;;
        	"Next menu")
        		menu2;;
        	"Quit")
			clean_temp
        		exit;;
         	*)
        		#usage;;
			echo "usage" ;;
        esac
}

function menu2 {

	menu	"ESX Host Operations"\
		"Performance Operations"\
		"VM Operations"\
		"Support Operations"\
		"Discovery Operations"\
		"Back to Main Menu"\
		"Quit"

		task="$( 0< "${dir_tmp}/${file_tmp}" )" ; if_arg_is_an_empty_variable_then_exit "task"

		case ${task} in
			"ESX Host Operations")
				hostop_menu;;
			"Performance Operations")
				ok_message "Performance Operations coming soon......"
				menu2;;
			"VM Operations")
				ok_message "VM Operations coming soon...."
				menu2;;
			"Support Operations")
				ok_message "Support Operations coming soon...."
				menu2;;
			"Discovery Operations")
				ok_message "Discovery Operations coming soon...."
				menu2;;
			"Back to Main Menu")
				menu1;;
			"Quit")
				clean_temp
				exit;;
			*)
				menu2;;
		esac
}

function vma {
	if [ -e /etc/vma-release ]; then
	VMA=1
	else
	VMA=0
	fi
}

function list_vma_servers {
if [ $VMA -eq 1 ]; then
                /usr/bin/vifp listservers | text
        else
                alert_message "This operation can only be run from a vMA appliance.\nFor information on vMA, go to\nhttp://communities.vmware.com/community/vmtn/vsphere/automationtools/vima\n"
        fi
	menu1
}

function addserver {
	vma
	if [ $VMA -eq 1 ]; then
        	input 7 \
			"Enter server name as it appears in DNS or enter IP: " ""\
			"Auth policy. Sets the authentication policy to fastpass authentication\nor the Active Directory (fpauth or adauth): " ""\
			"Connection protocol, http or https. HTTPS by default: " ""\
			"Connection port number of the target server. The default is 443: " ""\
			"Service path URL of the target server. The default is /sdk: " ""\
			"Username, If the target server points to an ESX/ESXi system,\n the default is root: " ""\
			"Password. Password for username: " ""
			IFS=$'\n'
			array=( $( 0< "${dir_tmp}/${file_tmp}" ) )

			for var in "${array[@]}"
			do
 				echo "${var}"
  			# do something on $var
			done
        else
                alert_message "This operation can only be run from a vMA appliance.\nFor information on vMA, go to\nhttp://communities.vmware.com/community/vmtn/vsphere/automationtools/vima\n"
        fi
	menu1
}

function set_server {
	        if [ $VMA -eq 1 ]; then
                ##ADD TO TITLE##printf "${yellow}Available ESX servers${white}\n"
                SERVER_LIST=(`/usr/bin/vifp listservers | awk '{print $1}'`)
		menu $SERVER_LIST[@]
		#VI_SERVER=${?}
		choice="$( 0< "${dir_tmp}/${file_tmp}" )" ; if_arg_is_an_empty_variable_then_exit "choice"
        else
                input 3 "Enter the ESX host name or IP to perform operations on " "${VI_SERVER} " \
			"Enter the userid for issuing commands: " "${VI_USERNAME} " \
        		"Enter password: " " "

		IFS=$'\n'
		array=( $( 0< "${dir_tmp}/${file_tmp}" ) )
                VI_SERVER=${array[0]}
		VI_USERNAME=${array[1]}
		VI_PASSWORD=${array[2]}
		question "Server is set to $VI_SERVER\nUser is set to $VI_USERNAME\nIs this correct?"
        fi
	menu1
}

function test_server_user_pw {
	wait_for "Testing Connectivity to $VI_SERVER with username $VI_USERNAME"
        INFO=`/usr/bin/vicfg-hostops --server $VI_SERVER --username $VI_USERNAME --password $VI_PASSWORD --operation info `
	RESULT=${?}
	terminate_wait_for
        if [ ${RESULT} -eq 0 ]; then
                ok_message "Test succeeded\n${INFO}"
        else
                alert_message "Test command failed.\n "
        fi
	menu1
}

function vilog {
        vma
        if [ $VMA -eq 1 ]; then
                printf "\nLogger Wizard\n\n\nAll logging will be turned off upon exit"
                printf "Current server list"
                LIST=( `/usr/bin/vifp listservers | awk '{print $1}'` )
                #X=0;Z=1;Y=${#LIST[@]}
                #while [ $X -lt $Y ]
                #do
                 #       printf "${Z}) ${LIST[$X]}\n"
                 #       let X=($X+1)
                 #       let Z=($Z+1)
                #done
		list ${LIST}
                printf "${Z}) All servers\n"
                printf "\n${green}Which server would you like to enable logging?${white} "
                read ESX
                let ESX=($ESX-1)
                let Z=($Z-1)
                printf "${green}Are you sure?(y/n)${white} "
                read YESNO
                if [[ $YESNO = 'y' || $YESNO = 'Y' ]]; then
                        if [ $ESX = $Z ]; then
                                printf "${yellow}Enabling loging on all servers${white}\n"
                                /usr/bin/vilogger enable
                        else
                                printf "${yellow}Enabling logging for ${LIST[${ESX}]} ${yellow}\n"
                                /usr/bin/vilogger enable --server ${LIST[${ESX}]}
                                if [ $? -eq 0 ]; then
                                        printf "${bold}${green}Command succeded${unbold}${white}\n\n"
                                fi
                        fi
                fi
        else
                alert_message "This operation can only be run from a vMA appliance.\nFor information on vMA, go to\nhttp://communities.vmware.com/community/vmtn/vsphere/automationtools/vima\n"
        fi
	menu1
}

menu1


clean_temp
